name: build autosd image
on:
  workflow_dispatch:

  #pull_request:
  #  branches:
  #    - main
  #push:
  #  branches:
  #    - main

env:
  # working dirs
  WORK_DIR: "/mnt/data/workspace"
  IMAGE_DIR: "/mnt/data/images"
  AIB_DIR: "/mnt/data/aib"

  # container build parameters
  ARCH: "arm64"

  # AIB parameters
  MANIFEST_FILE: radioapp.aib.yml

  AIB_DISTRO: autosd9  # autosd cs9
  AIB_ARCH: aarch64 # aarch64 x86_64
  AIB_TARGET: qemu # rpi4 qemu
  AIB_MODE: image # package image
  AIB_EXPORT_FORMAT: qcow2 # image qcow2 container

  CACHESIZE: "2GB"
  BUILD_NAME: "output"
  BUILDER_IMAGE: quay.io/centos-sig-automotive/automotive-osbuild:latest

  # import all secrets/envs needed to render the manifest file
  ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}

jobs:
  build-autosd-image:
    runs-on:
      group: aib-runners
      labels: [self-hosted, Linux, ARM64, aib]

    permissions:
      packages: write
      contents: read
      id-token: write
      attestations: write

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # prepare the environment
      
      - name: get version
        run: |
          VERSION="$(git rev-parse --short HEAD)"
          VERSION=${VERSION#v} # remove the leading v prefix for version
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}"

      - name: install dependencies
        run: |
          pip install -r .scripts/requirements.txt

      - name: create directories
        run: |
          # create the image directory
          mkdir -p ${{ env.IMAGE_DIR }}/$GITHUB_REPOSITORY

          # cache directory
          CACHE_DIR="${{ env.WORK_DIR }}/$GITHUB_REPOSITORY/.cache"
          mkdir -p $CACHE_DIR

          # create the temporary build directory used by AIB
          BUILD_DIR="${{ env.WORK_DIR }}/$GITHUB_REPOSITORY/${{ env.VERSION }}"
          mkdir -p $BUILD_DIR

          echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
          echo "CACHE_DIR=${CACHE_DIR}" >> $GITHUB_ENV
          echo "PODMAN_AUTH_FILE=${BUILD_DIR}/auth.json" >> $GITHUB_ENV

      - name: set image tags
        id: set-tags
        run: |
          TAGS="${{ vars.REGISTRY_ORG }}/radio-app:${{ env.VERSION }}"

          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: login to the registry
        run: |
          podman login ${{ vars.REGISTRY }} \
            --authfile ${{ env.PODMAN_AUTH_FILE }} \
            --username ${{ secrets.REGISTRY_USERNAME }} \
            --password ${{ secrets.REGISTRY_TOKEN }}

      # build the container

      - name: build the app container
        run: |
          buildah bud -f "src/Containerfile" \
            --tag ${{ steps.set-tags.outputs.tags }} \
            --arch ${{ env.ARCH }} --layers \
            "src"

      - name: push the container to the registry
        run: |
          podman push ${{ steps.set-tags.outputs.tags }} \
            --authfile ${{ env.PODMAN_AUTH_FILE }}

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="${{ vars.REGISTRY_ORG }}/radio-app:latest"
            
            podman tag ${{ steps.set-tags.outputs.tags }} $TAGS
            
            podman push $TAGS \
              --authfile ${{ env.PODMAN_AUTH_FILE }}
          fi

          if [[ "${{ github.ref }}" == refs/heads/release-* ]]; then
            RELEASE_BRANCH_NAME=$(basename "${{ github.ref }}")
            TAGS="${{ vars.REGISTRY_ORG }}/radio-app:${RELEASE_BRANCH_NAME}"
            
            podman tag ${{ steps.set-tags.outputs.tags }} $TAGS
            
            podman push $TAGS \
              --authfile ${{ env.PODMAN_AUTH_FILE }}
          fi

      # build the image

      - name: write the manifest
        uses: elieahd/templater@v1
        with:
          template: manifests/${{ env.MANIFEST_FILE }}
          file: ${{ env.BUILD_DIR }}/${{ env.MANIFEST_FILE }}
          variables: "WORKSPACE=$GITHUB_WORKSPACE VERSION=${{ env.VERSION }} ROOT_PASSWORD=${{ env.ROOT_PASSWORD }}"

      - name: build the OS image
        run: |
          CANONICAL_BUILD_NAME="${{ env.AIB_DISTRO }}-${{ env.AIB_TARGET }}-${{ env.VERSION }}.${{ env.AIB_ARCH }}.${{ env.AIB_EXPORT_FORMAT }}"
          FQN_BUILD_NAME=$GITHUB_REPOSITORY/$CANONICAL_BUILD_NAME
                                             
          echo "CANONICAL_BUILD_NAME=${CANONICAL_BUILD_NAME}" >> $GITHUB_ENV
          echo "FQN_BUILD_NAME=${FQN_BUILD_NAME}" >> $GITHUB_ENV

          OSBUILD_CMD="automotive-image-builder/automotive-image-builder \
            --verbose build \
            --distro "${{ env.AIB_DISTRO }}" \
            --arch "${{ env.AIB_ARCH }}" \
            --target "${{ env.AIB_TARGET }}" \
            --mode "${{ env.AIB_MODE }}" \
            --export "${{ env.AIB_EXPORT_FORMAT }}" \
            --build-dir="${{ env.BUILD_DIR }}" \
            --cache="${{ env.CACHE_DIR }}" \
            --cache-max-size="${{ env.CACHESIZE }}" \
            --osbuild-manifest="${{ env.BUILD_DIR }}/${{ env.BUILD_NAME }}.json" \
            "${{ env.BUILD_DIR }}/${{ env.MANIFEST_FILE }}" "${{ env.BUILD_DIR }}/${{ env.BUILD_NAME }}.${{ env.AIB_EXPORT_FORMAT }}""

          sudo podman run --rm --privileged --pull=newer --security-opt label=type:unconfined_t \
            -v /dev:/dev \
            -v "${{ env.AIB_DIR }}":"${{ env.AIB_DIR }}" \
            -v "${{ env.BUILD_DIR }}":"${{ env.BUILD_DIR }}" \
            -v "${{ env.CACHE_DIR }}":"${{ env.CACHE_DIR }}" \
            -v "$GITHUB_WORKSPACE":"$GITHUB_WORKSPACE" \
            ${{ env.BUILDER_IMAGE }} \
            /bin/bash -c "cd ${{ env.AIB_DIR }}; $OSBUILD_CMD" \
            && mv "${{ env.BUILD_DIR }}/${{ env.BUILD_NAME }}.${{ env.AIB_EXPORT_FORMAT }}" "${{ env.IMAGE_DIR }}/$GITHUB_REPOSITORY/$CANONICAL_BUILD_NAME"

      - name: upload the OS image
        run: |
          aws s3 cp "${{ env.IMAGE_DIR }}/${{ env.FQN_BUILD_NAME }}" "s3://${{ vars.ARTEFACT_BUCKET }}/${{ env.FQN_BUILD_NAME }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: create a digest
        run: |
          DIGEST="sha256:$(sha256sum ${{ env.IMAGE_DIR }}/${{ env.FQN_BUILD_NAME }} | cut -d' ' -f1)"
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV
          echo $DIGEST

      - name: generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.CANONICAL_BUILD_NAME }}
          subject-digest: ${{ env.DIGEST }}

      # cleanup

      - name: logout of the registry
        run: |
          podman logout ${{ vars.REGISTRY }} \
            --authfile ${{ env.PODMAN_AUTH_FILE }}

      - name: remove artefacts and directories
        run: |
          rm "${{ env.IMAGE_DIR }}/${{ env.FQN_BUILD_NAME }}"
          sudo rm -rf ${{ env.BUILD_DIR }}