name: build base container images
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  REGISTRY: quay.io
  REGISTRY_ORG: quay.io/rhadp-examples

  WORK_DIR: "/mnt/data/builds"
  RUNNER_GROUP: "aib-runners"

jobs:
  # build base container images on hosted runners, i.e. on GitHub infrastructure
  build-base-containers:
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            name: codespaces

    runs-on: ${{ matrix.runs-on }}
    
    permissions:
      packages: write
      contents: read
      id-token: write
      attestations: write
      
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: get version
        run: |
          # check if there are any tags, if not use a default version
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            VERSION=$(git describe --tags --exact-match HEAD)
          elif git describe --tags 2>/dev/null; then
            VERSION=$(git describe --tags)
          else
            VERSION="$(git rev-parse --short HEAD)"
          fi
          VERSION=${VERSION#v} # remove the leading v prefix for version
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}"

      - name: set image tags
        id: set-tags
        run: |
          TAGS="${{ env.REGISTRY_ORG }}/${{ matrix.name }}:${{ env.VERSION }}"

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="$TAGS,${{ env.REGISTRY_ORG }}/${{ matrix.name }}:latest"
          fi

          if [[ "${{ github.ref }}" == refs/heads/release-* ]]; then
            RELEASE_BRANCH_NAME=$(basename "${{ github.ref }}")
            TAGS="$TAGS,${{ env.REGISTRY_ORG }}/${{ matrix.name }}:${RELEASE_BRANCH_NAME}"
          fi

          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: enable docker multi-arch support
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: login to quay.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      
      - name: setup qemu
        uses: docker/setup-qemu-action@v3

      - name: setup buildx
        uses: docker/setup-buildx-action@v3
      
      - id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_ORG }}/${{ matrix.name }}
      
      - name: build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          context: "containers/${{ matrix.name }}"
          file: "containers/${{ matrix.name }}/Containerfile"
          tags: ${{ steps.set-tags.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      - name: generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY_ORG }}/${{ matrix.name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # build application container images on the self-hosted runners, i.e. on the RHEL VM
  
  build-application-containers:
    strategy:
      matrix:
        include:
          - name: application
            runs-on:
              group: ${{ env.RUNNER_GROUP }}
              labels: [self-hosted, Linux, ARM64, aib]

    runs-on: ${{ matrix.runs-on }}
    permissions:
      packages: write
      contents: read
      id-token: write
      attestations: write

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get version
        run: |
          VERSION="$(git rev-parse --short HEAD)"
          VERSION=${VERSION#v} # remove the leading v prefix for version
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}"

      - name: create temp build directory
        run: |
          BUILD_DIR="${{ env.WORK_DIR }}/${{ env.VERSION }}"
          mkdir -p $BUILD_DIR
          echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
          echo "PODMAN_AUTH_FILE=${BUILD_DIR}/auth.json" >> $GITHUB_ENV

      - name: set image tags
        id: set-tags
        run: |
          TAGS="${{ env.REGISTRY_ORG }}/${{ matrix.name }}:${{ env.VERSION }}"

          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: login to the registry
        run: |
          podman login ${{ env.REGISTRY }} \
            --authfile ${{ env.PODMAN_AUTH_FILE }} \
            --username ${{ secrets.REGISTRY_USERNAME }} \
            --password ${{ secrets.REGISTRY_TOKEN }}

      - name: build the container
        run: |
          buildah bud -f "containers/${{ matrix.name }}/Containerfile" \
            --tag ${{ steps.set-tags.outputs.tags }} \
            --arch arm64 --layers \
            "containers/${{ matrix.name }}"

      - name: push to registry
        run: |
          podman push ${{ steps.set-tags.outputs.tags }} \
            --authfile ${{ env.PODMAN_AUTH_FILE }}

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="${{ env.REGISTRY_ORG }}/${{ matrix.name }}:latest"
            
            podman tag ${{ steps.set-tags.outputs.tags }} $TAGS
            
            podman push $TAGS \
              --authfile ${{ env.PODMAN_AUTH_FILE }}
          fi

          if [[ "${{ github.ref }}" == refs/heads/release-* ]]; then
            RELEASE_BRANCH_NAME=$(basename "${{ github.ref }}")
            TAGS="${{ env.REGISTRY_ORG }}/${{ matrix.name }}:${RELEASE_BRANCH_NAME}"
            
            podman tag ${{ steps.set-tags.outputs.tags }} $TAGS
            
            podman push $TAGS \
              --authfile ${{ env.PODMAN_AUTH_FILE }}
          fi

      - name: cleanup
        run: |
          podman logout ${{ env.REGISTRY }} \
            --authfile ${{ env.PODMAN_AUTH_FILE }}

          rm -rf ${{ env.BUILD_DIR }}